package entity;

import java.util.HashMap;
import java.util.Map;

/**
 * The representation of the player, which the user controls.
 */
public class Player {
    private static Player instance;
    private static Inventory inventory;
    private String pclass;
    private String prace;
    private final Map<String, Item> equippedItems;
    private AbstractRoom currentAbstractRoom;
    private int classArmor;
    private int classDamage;
    private int raceArmor;
    private int raceDamage;
    private int totalArmor;
    private int totalDamage;

    private int health;
    private int maxHealth;
    private int healthRegeneration;

    private String armor = "Armor";
    private String weapon = "Weapon";
    private String buff = "Buff";

    public Player() {
        // Assume Base information for all race, add value if race changed.
        this.inventory = new Inventory();
        this.maxHealth = 100;
        this.health = maxHealth;
        this.healthRegeneration = 0;
        this.equippedItems = new HashMap<>();
        this.totalArmor = 0;
        this.totalDamage = 10;
        this.equippedItems.put(armor, null);
        this.equippedItems.put(weapon, null);
        this.equippedItems.put(buff, null);
    }

    /**
     * Getter for pClass.
     * @return pclass
     */
    public String getPclass() {
        return pclass;
    }

    /**
     * Setter for pClass.
     * @param pclass new pclass
     */
    public void setPclass(String pclass) {
        this.pclass = pclass;
    }

    /**
     * Getter for pRace.
     * @return prace
     */
    public String getPrace() {
        return prace;
    }

    /**
     * Setter for pRace.
     * @param race prace
     */
    public void setPrace(String race) {
        this.prace = race;
    }

    public static void setInventory(Inventory newInventory) {
        inventory = newInventory;
    }

    /**
     * Get the player's inventory.
     * @return inventory
     */
    public static Inventory getInventory() {
        if (inventory == null) {
            // Initialize if not already set
            inventory = new Inventory();
        }
        return inventory;
    }

    public int getHealth() {
        return health;
    }

    public void setHealth(int health) {
        this.health = Math.min(health, maxHealth);
        if (this.health < 0) {
            this.health = 0;
        }
    }

    /**
     * Getter and setter for max health.
     */
    public int getMaxHealth() {
        return maxHealth;
    }

    /**
     * Increase the player's max health limit.
     * @param amount by how much to increase
     */
    public void increaseHealthLimit(int amount) {
        this.maxHealth += amount;
        System.out.println("Max health increased by " + amount + ". New max health: " + maxHealth);
    }

    /**
     * Getter and setter for health regeneration.
     */
    public int getHealthRegeneration() {
        return healthRegeneration;
    }

    /**
     * Increase the player's health regeneration.
     * @param amount by how much to increase
     */
    public void increaseHealthRegeneration(int amount) {
        this.healthRegeneration += amount;
        System.out.println(
                "Health regeneration increased by " + amount + ". New health regeneration: " + healthRegeneration);
    }

    /**
     * Regenerates health based on the health regeneration attribute.
     */
    public void regenerateHealth() {
        if (healthRegeneration > 0) {
            setHealth(health + healthRegeneration);
            System.out.println("Health regenerated by " + healthRegeneration + ". Current health: " + health);
        }
    }

    /**
     * Equips an item into the appropriate slot.
     *
     * @param item The item to equip.
     * @return A message indicating the result of the operation.
     */
    public String equipItem(Item item) {
        final String slot;
        if (item instanceof Armor) {
            slot = armor;
            increaseArmor(((Armor) item).getArmorBoost());
        }
        else if (item instanceof Weapon) {
            slot = weapon;
            increaseDamage(((Weapon) item).getAttackBoost());  // Apply weapon effect

        }
        else if (item instanceof Buff) {
            slot = buff;
            increaseHealthRegeneration(((Buff) item).getHealthRestoration());
        }
        else {
            slot = "Invalid item type.";
        }

        // Check if the slot already has an equipped item
        Item currentItem = equippedItems.get(slot);
        if (currentItem != null) {
            // Add the old item back to inventory (if replaced)
            inventory.addItem(currentItem.getName(), currentItem);
            System.out.println("Replaced " + currentItem.getName() + " with " + item.getName() + " in " + slot + " slot.");
        }

        // Add the new item to the inventory (it was already added in the "applyEffect" logic)
        inventory.addItem(item.getName(), item);

        // Equip the new item in the corresponding slot
        equippedItems.put(slot, item);

        return "Equipped " + item.getName() + " in " + slot + " slot.";
    }


    /**
     * Returns the singleton instance of Player.
     *
     * @return the Player instance.
     */
    public static Player getInstance() {
        if (instance == null) {
            instance = new Player();
        }
        return instance;
    }

    /**
     * Getter for the current room.
     *
     * @return the current room of the player
     */
    public AbstractRoom getCurrentRoom() {
        return currentAbstractRoom;
    }

    /**
     * Setter for the current room.
     *
     * @param newCurrentAbstractRoom the room to set as the player's current room
     */
    public void setCurrentRoom(AbstractRoom newCurrentAbstractRoom) {
        this.currentAbstractRoom = newCurrentAbstractRoom;
    }

    /**
     * Replace an equipped item with a new item.
     * @param newItem the new item
     * @return the old item
     */
    public Item replaceItem(Item newItem) {
        final String category = newItem.getCategory();
        Item oldItem = null;

        switch (category) {
            case "Weapon":
                oldItem = inventory.getEquippedWeapon();
                inventory.setEquippedWeapon(newItem);
                break;
            case "Armor":
                oldItem = inventory.getEquippedArmor();
                inventory.setEquippedArmor(newItem);
                break;
            case "Buff":
                oldItem = inventory.getEquippedBuff();
                inventory.setEquippedBuff(newItem);
                break;
            default:
        }

        if (oldItem != null) {
            inventory.addItem(oldItem.getName(), oldItem);
        }
        return oldItem;
    }

    public int getClassArmor() {
        return classArmor;
    }

    /**
     * Setter for classArmor.
     * @param classArmor new class armor
     */
    public void setClassArmor(int classArmor) {
        this.setTotalArmor(this.getTotalArmor() - this.getClassArmor());
        this.classArmor = classArmor;
        this.setTotalArmor(this.getTotalArmor() + classArmor);
    }

    public int getClassDamage() {
        return classDamage;
    }

    /**
     * Setter for classDamage.
     * @param classDamage new class damage
     */
    public void setClassDamage(int classDamage) {
        this.setTotalDamage(this.getTotalDamage() - this.getClassDamage());
        this.classDamage = classDamage;
        this.setTotalDamage(this.getTotalDamage() + classDamage);
    }

    public int getRaceArmor() {
        return raceArmor;
    }

    /**
     * Setter for race armor.
     * @param raceArmor new race armor
     */
    public void setRaceArmor(int raceArmor) {
        this.setTotalArmor(this.getTotalArmor() - this.getRaceArmor());
        this.raceArmor = raceArmor;
        this.setTotalArmor(this.getTotalArmor() + raceArmor);
    }

    public int getRaceDamage() {
        return raceDamage;
    }

    /**
     * Setter for race damage.
     * @param raceDamage new race damage
     */
    public void setRaceDamage(int raceDamage) {
        this.setTotalDamage(this.getTotalDamage() - this.getRaceDamage());
        this.raceDamage = raceDamage;
        this.setTotalDamage(this.getTotalDamage() + raceDamage);
    }

    public int getTotalArmor() {
        return totalArmor;
    }

    public void setTotalArmor(int totalArmor) {
        this.totalArmor = totalArmor;
    }

    public int getTotalDamage() {
        return totalDamage;
    }

    public void setTotalDamage(int totalDamage) {
        this.totalDamage = totalDamage;
    }

    /**
     * Increaser for Armor.
     * @param amount how much armor has increased by
     */
    public void increaseArmor(int amount) {
        this.setTotalArmor(this.getTotalArmor() + amount);
        System.out.println("Defense increased by " + amount + ". New defense: " + this.getTotalArmor());
    }

    /**
     * Increaser for damage.
     * @param amount how much damage has increased by
     */
    public void increaseDamage(int amount) {
        this.setTotalDamage(this.getTotalDamage() + amount);
        System.out.println("Attack power increased by " + amount + ". New attack power: " + this.getTotalDamage());
    }
}
