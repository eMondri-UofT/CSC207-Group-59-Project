package entity;

import java.util.HashMap;
import java.util.Map;

/**
 * The representation of the player, which the user controls.
 */
public class Player {
    private static Player instance;
    private String pclass;
    private String prace;
    private static Inventory inventory;
    private final Map<String, Item> equippedItems;
    private Room currentRoom;


    private int health;
    private int maxHealth;
    private int armor;
    private int attackPower;
    private int healthRegeneration;


    public Player() {
        this.inventory = new Inventory();     //assume Base information for all race, add value if race changed.
        this.health = 100;
        this.maxHealth = 100;
        this.armor = 0;
        this.attackPower = 10;
        this.healthRegeneration = 0;
        this.equippedItems = new HashMap<>();
        this.equippedItems.put("Armor", null);
        this.equippedItems.put("Weapon", null);
        this.equippedItems.put("Buff", null);
    }

    /**
     * Getter and setter for pclass.
     */
    public String getPclass() {
        return pclass;
    }
    public void setPclass(String pclass) {
        this.pclass = pclass;
    }

    /**
     * Getter and setter for prace.
     */
    public String getPrace() {
        return prace;
    }
    public void setPrace(String race) {
        this.prace = race;
    }


    public static void setInventory(Inventory newInventory) {
        inventory = newInventory;
    }


    public static Inventory getInventory() {
        if (inventory == null) {
            inventory = new Inventory(); // Initialize if not already set
        }
        return inventory;
    }


    public int getHealth() {
        return health;
    }
    public void setHealth(int health) {
        this.health = Math.min(health, maxHealth);
    }

    /**
     * Getter and setter for max health.
     */
    public int getMaxHealth() {
        return maxHealth;
    }
    public void increaseHealthLimit(int amount) {
        this.maxHealth += amount;
        System.out.println("Max health increased by " + amount + ". New max health: " + maxHealth);
    }

    /**
     * Getter and setter for defense.
     */
    public int getArmor() {
        return armor;
    }
    public void increaseArmor(int amount) {
        this.armor += amount;
        System.out.println("Defense increased by " + amount + ". New defense: " + armor);
    }

    /**
     * Getter and setter for attack power.
     */
    public int getAttackPower() {
        return attackPower;
    }
    public void increaseAttack(int amount) {
        this.attackPower += amount;
        System.out.println("Attack power increased by " + amount + ". New attack power: " + attackPower);
    }

    /**
     * Getter and setter for health regeneration.
     */
    public int getHealthRegeneration() {
        return healthRegeneration;
    }
    public void increaseHealthRegeneration(int amount) {
        this.healthRegeneration += amount;
        System.out.println("Health regeneration increased by " + amount + ". New health regeneration: " + healthRegeneration);
    }

    /**
     * Regenerates health based on the health regeneration attribute.
     */
    public void regenerateHealth() {
        if (healthRegeneration > 0) {
            setHealth(health + healthRegeneration);
            System.out.println("Health regenerated by " + healthRegeneration + ". Current health: " + health);
        }
    }

    /**
     * Equips an item into the appropriate slot.
     *
     * @param item The item to equip.
     * @return A message indicating the result of the operation.
     */
    public String equipItem(Item item) {
        String slot;
        if (item instanceof Armor) {
            slot = "Armor";
        } else if (item instanceof Weapon) {
            slot = "Weapon";
        } else if (item instanceof Buff) {
            slot = "Buff";
        } else {
            return "Invalid item type.";
        }

        // Add the item to the inventory
        inventory.addItem(item.getName(), item);

        // Equip the item
        equippedItems.put(slot, item);
        return "Equipped " + item.getName() + " in " + slot + " slot.";
    }


    /**
     * Returns the singleton instance of Player.
     *
     * @return the Player instance.
     */
    public static Player getInstance() {
        if (instance == null) {
            instance = new Player();
        }
        return instance;
    }

    /**
     * Getter for the current room.
     *
     * @return the current room of the player
     */
    public Room getCurrentRoom() {
        return currentRoom;
    }

    /**
     * Setter for the current room.
     *
     * @param currentRoom the room to set as the player's current room
     */
    public void setCurrentRoom(Room currentRoom) {
        this.currentRoom = currentRoom;
    }


}
